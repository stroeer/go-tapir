// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: stroeer/curation/v1/core_curation_service.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurationServiceClient is the client API for CurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurationServiceClient interface {
	GetCuration(ctx context.Context, in *GetCurationRequest, opts ...grpc.CallOption) (*GetCurationResponse, error)
	BatchGetCuration(ctx context.Context, in *BatchGetCurationRequest, opts ...grpc.CallOption) (*BatchGetCurationResponse, error)
}

type curationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurationServiceClient(cc grpc.ClientConnInterface) CurationServiceClient {
	return &curationServiceClient{cc}
}

func (c *curationServiceClient) GetCuration(ctx context.Context, in *GetCurationRequest, opts ...grpc.CallOption) (*GetCurationResponse, error) {
	out := new(GetCurationResponse)
	err := c.cc.Invoke(ctx, "/stroeer.curation.v1.CurationService/GetCuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curationServiceClient) BatchGetCuration(ctx context.Context, in *BatchGetCurationRequest, opts ...grpc.CallOption) (*BatchGetCurationResponse, error) {
	out := new(BatchGetCurationResponse)
	err := c.cc.Invoke(ctx, "/stroeer.curation.v1.CurationService/BatchGetCuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurationServiceServer is the server API for CurationService service.
// All implementations must embed UnimplementedCurationServiceServer
// for forward compatibility
type CurationServiceServer interface {
	GetCuration(context.Context, *GetCurationRequest) (*GetCurationResponse, error)
	BatchGetCuration(context.Context, *BatchGetCurationRequest) (*BatchGetCurationResponse, error)
	mustEmbedUnimplementedCurationServiceServer()
}

// UnimplementedCurationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCurationServiceServer struct {
}

func (UnimplementedCurationServiceServer) GetCuration(context.Context, *GetCurationRequest) (*GetCurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCuration not implemented")
}
func (UnimplementedCurationServiceServer) BatchGetCuration(context.Context, *BatchGetCurationRequest) (*BatchGetCurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetCuration not implemented")
}
func (UnimplementedCurationServiceServer) mustEmbedUnimplementedCurationServiceServer() {}

// UnsafeCurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurationServiceServer will
// result in compilation errors.
type UnsafeCurationServiceServer interface {
	mustEmbedUnimplementedCurationServiceServer()
}

func RegisterCurationServiceServer(s grpc.ServiceRegistrar, srv CurationServiceServer) {
	s.RegisterService(&CurationService_ServiceDesc, srv)
}

func _CurationService_GetCuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurationServiceServer).GetCuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stroeer.curation.v1.CurationService/GetCuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurationServiceServer).GetCuration(ctx, req.(*GetCurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurationService_BatchGetCuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetCurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurationServiceServer).BatchGetCuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stroeer.curation.v1.CurationService/BatchGetCuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurationServiceServer).BatchGetCuration(ctx, req.(*BatchGetCurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurationService_ServiceDesc is the grpc.ServiceDesc for CurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stroeer.curation.v1.CurationService",
	HandlerType: (*CurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCuration",
			Handler:    _CurationService_GetCuration_Handler,
		},
		{
			MethodName: "BatchGetCuration",
			Handler:    _CurationService_BatchGetCuration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stroeer/curation/v1/core_curation_service.proto",
}
