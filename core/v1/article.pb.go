// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: stroeer/core/v1/article.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Article_Type int32

const (
	Article_TYPE_UNSPECIFIED Article_Type = 0
	Article_ARTICLE          Article_Type = 1
	// Deprecated: Marked as deprecated in stroeer/core/v1/article.proto.
	Article_IMAGE   Article_Type = 2
	Article_VIDEO   Article_Type = 3
	Article_GALLERY Article_Type = 4
	Article_EMBED   Article_Type = 5
	Article_AUTHOR  Article_Type = 6
	// Deprecated: Marked as deprecated in stroeer/core/v1/article.proto.
	Article_AGENCY   Article_Type = 7
	Article_EXTERNAL Article_Type = 8
	Article_INTERNAL Article_Type = 100
)

// Enum value maps for Article_Type.
var (
	Article_Type_name = map[int32]string{
		0:   "TYPE_UNSPECIFIED",
		1:   "ARTICLE",
		2:   "IMAGE",
		3:   "VIDEO",
		4:   "GALLERY",
		5:   "EMBED",
		6:   "AUTHOR",
		7:   "AGENCY",
		8:   "EXTERNAL",
		100: "INTERNAL",
	}
	Article_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"ARTICLE":          1,
		"IMAGE":            2,
		"VIDEO":            3,
		"GALLERY":          4,
		"EMBED":            5,
		"AUTHOR":           6,
		"AGENCY":           7,
		"EXTERNAL":         8,
		"INTERNAL":         100,
	}
)

func (x Article_Type) Enum() *Article_Type {
	p := new(Article_Type)
	*p = x
	return p
}

func (x Article_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[0].Descriptor()
}

func (Article_Type) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[0]
}

func (x Article_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_Type.Descriptor instead.
func (Article_Type) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 0}
}

type Article_SubType int32

const (
	Article_SUB_TYPE_UNSPECIFIED Article_SubType = 0
	Article_NEWS                 Article_SubType = 1
	Article_COLUMN               Article_SubType = 2
	Article_COMMENTARY           Article_SubType = 3
	Article_INTERVIEW            Article_SubType = 4
	Article_CONTROVERSY          Article_SubType = 5
	Article_TAGESANBRUCH         Article_SubType = 6
	Article_EVERGREEN            Article_SubType = 7
	Article_AGENCY_IMPORT        Article_SubType = 8
	Article_ADVERTORIAL          Article_SubType = 9
	Article_QUIZ                 Article_SubType = 10
	Article_GAME                 Article_SubType = 11
	Article_COMPLIANCE           Article_SubType = 12
	Article_RECIPE               Article_SubType = 13
)

// Enum value maps for Article_SubType.
var (
	Article_SubType_name = map[int32]string{
		0:  "SUB_TYPE_UNSPECIFIED",
		1:  "NEWS",
		2:  "COLUMN",
		3:  "COMMENTARY",
		4:  "INTERVIEW",
		5:  "CONTROVERSY",
		6:  "TAGESANBRUCH",
		7:  "EVERGREEN",
		8:  "AGENCY_IMPORT",
		9:  "ADVERTORIAL",
		10: "QUIZ",
		11: "GAME",
		12: "COMPLIANCE",
		13: "RECIPE",
	}
	Article_SubType_value = map[string]int32{
		"SUB_TYPE_UNSPECIFIED": 0,
		"NEWS":                 1,
		"COLUMN":               2,
		"COMMENTARY":           3,
		"INTERVIEW":            4,
		"CONTROVERSY":          5,
		"TAGESANBRUCH":         6,
		"EVERGREEN":            7,
		"AGENCY_IMPORT":        8,
		"ADVERTORIAL":          9,
		"QUIZ":                 10,
		"GAME":                 11,
		"COMPLIANCE":           12,
		"RECIPE":               13,
	}
)

func (x Article_SubType) Enum() *Article_SubType {
	p := new(Article_SubType)
	*p = x
	return p
}

func (x Article_SubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_SubType) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[1].Descriptor()
}

func (Article_SubType) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[1]
}

func (x Article_SubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_SubType.Descriptor instead.
func (Article_SubType) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 1}
}

type Article_Element_Type int32

const (
	Article_Element_TYPE_UNSPECIFIED  Article_Element_Type = 0
	Article_Element_ARTICLE           Article_Element_Type = 1
	Article_Element_IMAGE             Article_Element_Type = 2
	Article_Element_VIDEO             Article_Element_Type = 3
	Article_Element_GALLERY           Article_Element_Type = 4
	Article_Element_OEMBED            Article_Element_Type = 5
	Article_Element_AUTHOR            Article_Element_Type = 6
	Article_Element_AGENCY            Article_Element_Type = 7
	Article_Element_EDGE_SIDE_INCLUDE Article_Element_Type = 8
	Article_Element_CITATION          Article_Element_Type = 9
)

// Enum value maps for Article_Element_Type.
var (
	Article_Element_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "ARTICLE",
		2: "IMAGE",
		3: "VIDEO",
		4: "GALLERY",
		5: "OEMBED",
		6: "AUTHOR",
		7: "AGENCY",
		8: "EDGE_SIDE_INCLUDE",
		9: "CITATION",
	}
	Article_Element_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":  0,
		"ARTICLE":           1,
		"IMAGE":             2,
		"VIDEO":             3,
		"GALLERY":           4,
		"OEMBED":            5,
		"AUTHOR":            6,
		"AGENCY":            7,
		"EDGE_SIDE_INCLUDE": 8,
		"CITATION":          9,
	}
)

func (x Article_Element_Type) Enum() *Article_Element_Type {
	p := new(Article_Element_Type)
	*p = x
	return p
}

func (x Article_Element_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_Element_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[2].Descriptor()
}

func (Article_Element_Type) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[2]
}

func (x Article_Element_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_Element_Type.Descriptor instead.
func (Article_Element_Type) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 1, 0}
}

// *
// ## `Element.Relation`
//
// | Enum value             | Description                                                                                       |
// |------------------------|---------------------------------------------------------------------------------------------------|
// | `RELATION_UNSPECIFIED` | unspecified                                                                                       |
// | `OPENER`               | As an opener element (within the content)                                                         |
// | `TEASER`               | As a teaser element (when externally viewed)                                                      |
// | `SOCIAL`               | Use as social element (mostly images), e.g. `<og:image>` or JSON-LD                               |
//
// @CodeBlockStart protobuf
type Article_Element_Relation int32

const (
	Article_Element_RELATION_UNSPECIFIED Article_Element_Relation = 0
	Article_Element_OPENER               Article_Element_Relation = 1
	Article_Element_TEASER               Article_Element_Relation = 2
	Article_Element_SOCIAL               Article_Element_Relation = 3
)

// Enum value maps for Article_Element_Relation.
var (
	Article_Element_Relation_name = map[int32]string{
		0: "RELATION_UNSPECIFIED",
		1: "OPENER",
		2: "TEASER",
		3: "SOCIAL",
	}
	Article_Element_Relation_value = map[string]int32{
		"RELATION_UNSPECIFIED": 0,
		"OPENER":               1,
		"TEASER":               2,
		"SOCIAL":               3,
	}
)

func (x Article_Element_Relation) Enum() *Article_Element_Relation {
	p := new(Article_Element_Relation)
	*p = x
	return p
}

func (x Article_Element_Relation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_Element_Relation) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[3].Descriptor()
}

func (Article_Element_Relation) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[3]
}

func (x Article_Element_Relation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_Element_Relation.Descriptor instead.
func (Article_Element_Relation) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 1, 1}
}

type Article_Element_Asset_Type int32

const (
	Article_Element_Asset_TYPE_UNSPECIFIED Article_Element_Asset_Type = 0
	Article_Element_Asset_IMAGE            Article_Element_Asset_Type = 1
	Article_Element_Asset_VIDEO            Article_Element_Asset_Type = 2
	Article_Element_Asset_EXTERNAL_VIDEO   Article_Element_Asset_Type = 3
	Article_Element_Asset_METADATA         Article_Element_Asset_Type = 4
	Article_Element_Asset_LINK             Article_Element_Asset_Type = 5
)

// Enum value maps for Article_Element_Asset_Type.
var (
	Article_Element_Asset_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "IMAGE",
		2: "VIDEO",
		3: "EXTERNAL_VIDEO",
		4: "METADATA",
		5: "LINK",
	}
	Article_Element_Asset_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"IMAGE":            1,
		"VIDEO":            2,
		"EXTERNAL_VIDEO":   3,
		"METADATA":         4,
		"LINK":             5,
	}
)

func (x Article_Element_Asset_Type) Enum() *Article_Element_Asset_Type {
	p := new(Article_Element_Asset_Type)
	*p = x
	return p
}

func (x Article_Element_Asset_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_Element_Asset_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[4].Descriptor()
}

func (Article_Element_Asset_Type) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[4]
}

func (x Article_Element_Asset_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_Element_Asset_Type.Descriptor instead.
func (Article_Element_Asset_Type) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

// *
// ## Type
//
// Each `Body` has a `Body.Type` to help the consumer to correctly interpret
// the  [`BodyNode's`][bn] content.
//
// | Enum value          | Description                                                                                                               |
// |---------------------|---------------------------------------------------------------------------------------------------------------------------|
// | `TYPE_UNSPECIFIED`  | unspecified                                                                                                               |
// | `BODY`              | The textual article body including all inline elements such as `IMAGE`, `VIDEO` and `EMBED`                               |
// | `ARTICLE_SOURCES`   | A wrapper for all article sources ("Quellenaparat"). There can only be one of these per article.                          |
// | `DISCLAIMER`        | A article disclaimer with important notes/legal stuff. E.g. "medizinischer Hinweis" on all medical articles               |
// | `TRUST_BOX`         | Includes information what the current article type is (e.g. opinion article). There can only be one of these per article. |
// | `TABLE_OF_CONTENTS` | Table of contents for this article, consists of anchors which refer to sub headlines within the `BODY`                    |
//
// @CodeBlockStart protobuf
type Article_Body_Type int32

const (
	Article_Body_TYPE_UNSPECIFIED  Article_Body_Type = 0
	Article_Body_BODY              Article_Body_Type = 1
	Article_Body_ARTICLE_SOURCES   Article_Body_Type = 2
	Article_Body_DISCLAIMER        Article_Body_Type = 3
	Article_Body_TRUST_BOX         Article_Body_Type = 4
	Article_Body_TABLE_OF_CONTENTS Article_Body_Type = 5
)

// Enum value maps for Article_Body_Type.
var (
	Article_Body_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "BODY",
		2: "ARTICLE_SOURCES",
		3: "DISCLAIMER",
		4: "TRUST_BOX",
		5: "TABLE_OF_CONTENTS",
	}
	Article_Body_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":  0,
		"BODY":              1,
		"ARTICLE_SOURCES":   2,
		"DISCLAIMER":        3,
		"TRUST_BOX":         4,
		"TABLE_OF_CONTENTS": 5,
	}
)

func (x Article_Body_Type) Enum() *Article_Body_Type {
	p := new(Article_Body_Type)
	*p = x
	return p
}

func (x Article_Body_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_Body_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[5].Descriptor()
}

func (Article_Body_Type) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[5]
}

func (x Article_Body_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_Body_Type.Descriptor instead.
func (Article_Body_Type) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 2, 0}
}

// *
// ## `enum State`
//
// State of the item ([`Article`](article.html), [`Element`](article.element.html))
// in the content management system. The `state` in combination with
// `start_time` and `end_time` determines whether or not this item should be
// rendered; this must be respected by all consumers especially
// when content is duplicated or cached.
//
// The terms `deleted` (articles) and `archived` (media lib) are interchangeable/synonyms.
// This enum combines those two into `State.DELETED`. An Article is in `State.DELETED`
// if it was deleted in the content management system, or if it's [end_time](#end_time)
// has been reached.
//
// An Article is in `State.DRAFT` if it has never been published, or if the
// `start_time` lies in the future.
//
// | Enum value          | description                                                    |
// |---------------------|----------------------------------------------------------------|
// | `STATE_UNSPECIFIED` | unspecified                                                    |
// | `PUBLISHED`         | published content which is currently within its validity dates |
// | `DELETED`           | this content is deleted or expired in the CMS                  |
// | `DRAFT`             | this content was never published in the CMS                    |
//
// @CodeBlockStart protobuf
type Article_Metadata_State int32

const (
	Article_Metadata_STATE_UNSPECIFIED Article_Metadata_State = 0
	Article_Metadata_PUBLISHED         Article_Metadata_State = 1
	Article_Metadata_DELETED           Article_Metadata_State = 2
	Article_Metadata_DRAFT             Article_Metadata_State = 3
)

// Enum value maps for Article_Metadata_State.
var (
	Article_Metadata_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PUBLISHED",
		2: "DELETED",
		3: "DRAFT",
	}
	Article_Metadata_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PUBLISHED":         1,
		"DELETED":           2,
		"DRAFT":             3,
	}
)

func (x Article_Metadata_State) Enum() *Article_Metadata_State {
	p := new(Article_Metadata_State)
	*p = x
	return p
}

func (x Article_Metadata_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_Metadata_State) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[6].Descriptor()
}

func (Article_Metadata_State) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[6]
}

func (x Article_Metadata_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_Metadata_State.Descriptor instead.
func (Article_Metadata_State) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 3, 0}
}

// *
// ## `enum EventSource`
//
// Even more detail about the circumstances of transformation for this article.
//
// The `EventSource` will be of type:
//
// - `PRIMARY` in case this article was directly _updated_ and _published_
// - `SECONDARY` in case this article was indirectly updated.
// This can be caused by updates of _nested elements_,
// such as _Videos_ that may expire at some point. Another source of change may be
// _Scheduled Events_ like this item becomes _valid_ or _invalid_ at some
// point in time in the future after the item's original publication time.
//
// | Enum value               | description                                                                     |
// |--------------------------|---------------------------------------------------------------------------------|
// | EVENT_SOURCE_UNSPECIFIED | unspecified                                                                     |
// | PRIMARY                  | this article's transformation was caused by a direct change in the CMS          |
// | SECONDARY                | this article's transformation was caused by a transitive update                 |
// | CONTENT_ENGINE           | this article's transformation was caused by an external system (Content Engine) |
//
// @CodeBlockStart protobuf
type Article_Metadata_EventSource int32

const (
	Article_Metadata_EVENT_SOURCE_UNSPECIFIED Article_Metadata_EventSource = 0
	Article_Metadata_PRIMARY                  Article_Metadata_EventSource = 1
	Article_Metadata_SECONDARY                Article_Metadata_EventSource = 2
	Article_Metadata_CONTENT_ENGINE           Article_Metadata_EventSource = 3
)

// Enum value maps for Article_Metadata_EventSource.
var (
	Article_Metadata_EventSource_name = map[int32]string{
		0: "EVENT_SOURCE_UNSPECIFIED",
		1: "PRIMARY",
		2: "SECONDARY",
		3: "CONTENT_ENGINE",
	}
	Article_Metadata_EventSource_value = map[string]int32{
		"EVENT_SOURCE_UNSPECIFIED": 0,
		"PRIMARY":                  1,
		"SECONDARY":                2,
		"CONTENT_ENGINE":           3,
	}
)

func (x Article_Metadata_EventSource) Enum() *Article_Metadata_EventSource {
	p := new(Article_Metadata_EventSource)
	*p = x
	return p
}

func (x Article_Metadata_EventSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_Metadata_EventSource) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[7].Descriptor()
}

func (Article_Metadata_EventSource) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[7]
}

func (x Article_Metadata_EventSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_Metadata_EventSource.Descriptor instead.
func (Article_Metadata_EventSource) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 3, 1}
}

type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type        Article_Type       `protobuf:"varint,2,opt,name=type,proto3,enum=stroeer.core.v1.Article_Type" json:"type,omitempty"`
	SubType     Article_SubType    `protobuf:"varint,3,opt,name=sub_type,json=subType,proto3,enum=stroeer.core.v1.Article_SubType" json:"sub_type,omitempty"`
	SectionTree *Reference         `protobuf:"bytes,4,opt,name=section_tree,json=sectionTree,proto3" json:"section_tree,omitempty"`
	Fields      map[string]string  `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Bodies      []*Article_Body    `protobuf:"bytes,6,rep,name=bodies,proto3" json:"bodies,omitempty"`
	Metadata    *Article_Metadata  `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Elements    []*Article_Element `protobuf:"bytes,8,rep,name=elements,proto3" json:"elements,omitempty"`
	Keywords    []*Article_Keyword `protobuf:"bytes,9,rep,name=keywords,proto3" json:"keywords,omitempty"`
	Onwards     []int64            `protobuf:"varint,10,rep,packed,name=onwards,proto3" json:"onwards,omitempty"`
	// Deprecated: Marked as deprecated in stroeer/core/v1/article.proto.
	Entities []string `protobuf:"bytes,100,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0}
}

func (x *Article) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Article) GetType() Article_Type {
	if x != nil {
		return x.Type
	}
	return Article_TYPE_UNSPECIFIED
}

func (x *Article) GetSubType() Article_SubType {
	if x != nil {
		return x.SubType
	}
	return Article_SUB_TYPE_UNSPECIFIED
}

func (x *Article) GetSectionTree() *Reference {
	if x != nil {
		return x.SectionTree
	}
	return nil
}

func (x *Article) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Article) GetBodies() []*Article_Body {
	if x != nil {
		return x.Bodies
	}
	return nil
}

func (x *Article) GetMetadata() *Article_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Article) GetElements() []*Article_Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *Article) GetKeywords() []*Article_Keyword {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Article) GetOnwards() []int64 {
	if x != nil {
		return x.Onwards
	}
	return nil
}

// Deprecated: Marked as deprecated in stroeer/core/v1/article.proto.
func (x *Article) GetEntities() []string {
	if x != nil {
		return x.Entities
	}
	return nil
}

type Article_Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      Article_Element_Type       `protobuf:"varint,1,opt,name=type,proto3,enum=stroeer.core.v1.Article_Element_Type" json:"type,omitempty"`
	Relations []Article_Element_Relation `protobuf:"varint,2,rep,packed,name=relations,proto3,enum=stroeer.core.v1.Article_Element_Relation" json:"relations,omitempty"`
	Assets    []*Article_Element_Asset   `protobuf:"bytes,3,rep,name=assets,proto3" json:"assets,omitempty"`
	Children  []*Article_Element         `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *Article_Element) Reset() {
	*x = Article_Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article_Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article_Element) ProtoMessage() {}

func (x *Article_Element) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article_Element.ProtoReflect.Descriptor instead.
func (*Article_Element) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Article_Element) GetType() Article_Element_Type {
	if x != nil {
		return x.Type
	}
	return Article_Element_TYPE_UNSPECIFIED
}

func (x *Article_Element) GetRelations() []Article_Element_Relation {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *Article_Element) GetAssets() []*Article_Element_Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Article_Element) GetChildren() []*Article_Element {
	if x != nil {
		return x.Children
	}
	return nil
}

// *
//
// The `Body` represents a basic block. Each `Body` is self-contained and holds
// all the data required for rendering within its data structures.
//
// Common use cases for this are `Type.BODY` where the textual article body can be found
// and the `TYPE.ARTICLE_SOURCE` where onward articles are referenced.
//
// | Field name     | Type                         | Description                                                                                                                                  |
// |----------------|------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------|
// | `children`     | `repeated` [`BodyNode`][bn]  | Recursive/Nested structure that usually represents the textual body / Markup / HTML                                                          |
// | `type`         | [`Type`][t]                  | Unique ID of the article defined by the content management system (required).                                                                |
//
// [bn]: #bodynode
// [t]:  #type
//
// @CodeBlockStart protobuf
type Article_Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []*Article_Body_BodyNode `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
	Type     Article_Body_Type        `protobuf:"varint,2,opt,name=type,proto3,enum=stroeer.core.v1.Article_Body_Type" json:"type,omitempty"` //* @CodeBlockEnd
}

func (x *Article_Body) Reset() {
	*x = Article_Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article_Body) ProtoMessage() {}

func (x *Article_Body) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article_Body.ProtoReflect.Descriptor instead.
func (*Article_Body) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Article_Body) GetChildren() []*Article_Body_BodyNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Article_Body) GetType() Article_Body_Type {
	if x != nil {
		return x.Type
	}
	return Article_Body_TYPE_UNSPECIFIED
}

// *
// Article metadata like publication state and technical timestamps.
//
// | Field name               | Type                | Description                                                                                                                                                                                                                                                                                                                  |
// |--------------------------|---------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
// | `state`                  | [`State`][state]    | State of the article in the content management system. See [`enum State`](#enum-state)                                                                                                                                                                                                                                       |
// | `start_time`             | [`Timestamp`][ts]   | Manually set editorial timestamp (_Gültig von_) at which the article is valid to deliver on digital platforms in seconds of UTC time since Unix epoch.                                                                                                                                                                       |
// | `end_time`               | [`Timestamp`][ts]   | Manually set editorial timestamp (_Gültig bis_) till the article is valid to deliver on digital platforms in seconds of UTC time since Unix epoch.                                                                                                                                                                           |
// | `publish_time`           | [`Timestamp`][ts]   | Editorial timestamp (_Publikationsdatum_) of the first publication of the article in seconds of UTC time since Unix epoch. This date will be set automatically by the content management system.                                                                                                                             |
// | `update_time`            | [`Timestamp`][ts]   | Editorial timestamp (_Aktualisierungsdatum_) at which the article was updated in seconds of UTC time since Unix epoch. On first publication this timestamp matches `publish_time`. Afterwards it's either updated manually in the content management system or automatically if the article content changed *significantly*. |
// | `transformation_time`    | [`Timestamp`][ts]   | Technical timestamp at which the article was transformed in the API layer in seconds of UTC time since Unix epoch.                                                                                                                                                                                                           |
// | `transformation_errors`  | `int64`             | Number of errors occurred while fetching and/or transforming optional article components (e.g. `embeds` or nested `documents`) to an `article` message.                                                                                                                                                                      |
// | `last_modification_time` | [`Timestamp`][ts]   | Technical timestamp at which the article was published regardless of the amount and significance of the change.                                                                                                                                                                                                              |
// | `event_source`           | [`EventSource`][es] | Source of the event that caused this item to be transformed and to be written into the DB.                                                                                                                                                                                                                                   |
// | `seo_score`              | `double`            | The `article score` (originates from team data's _Content Engine_, higher scores are better)                                                                                                                                                                                                                                 |
// | `publication_id`         | `int64`             | The unique `publication_id` provided by the CMS, can be used to correlate the state of documents in tapir with the corresponding CMS publication event.                                                                                                                                                                      |
//
// [ts]:    https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp
// [state]: #state
// [es]:    #enum-eventsource
//
// @CodeBlockStart protobuf
type Article_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State                Article_Metadata_State       `protobuf:"varint,1,opt,name=state,proto3,enum=stroeer.core.v1.Article_Metadata_State" json:"state,omitempty"`
	StartTime            *timestamppb.Timestamp       `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              *timestamppb.Timestamp       `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	PublishTime          *timestamppb.Timestamp       `protobuf:"bytes,4,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	UpdateTime           *timestamppb.Timestamp       `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	TransformationTime   *timestamppb.Timestamp       `protobuf:"bytes,6,opt,name=transformation_time,json=transformationTime,proto3" json:"transformation_time,omitempty"`
	TransformationErrors int64                        `protobuf:"varint,7,opt,name=transformation_errors,json=transformationErrors,proto3" json:"transformation_errors,omitempty"`
	LastModificationTime *timestamppb.Timestamp       `protobuf:"bytes,8,opt,name=last_modification_time,json=lastModificationTime,proto3" json:"last_modification_time,omitempty"`
	EventSource          Article_Metadata_EventSource `protobuf:"varint,9,opt,name=event_source,json=eventSource,proto3,enum=stroeer.core.v1.Article_Metadata_EventSource" json:"event_source,omitempty"`
	SeoScore             float64                      `protobuf:"fixed64,10,opt,name=seo_score,json=seoScore,proto3" json:"seo_score,omitempty"`
	PublicationId        int64                        `protobuf:"varint,11,opt,name=publication_id,json=publicationId,proto3" json:"publication_id,omitempty"`
}

func (x *Article_Metadata) Reset() {
	*x = Article_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article_Metadata) ProtoMessage() {}

func (x *Article_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article_Metadata.ProtoReflect.Descriptor instead.
func (*Article_Metadata) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Article_Metadata) GetState() Article_Metadata_State {
	if x != nil {
		return x.State
	}
	return Article_Metadata_STATE_UNSPECIFIED
}

func (x *Article_Metadata) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Article_Metadata) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Article_Metadata) GetPublishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishTime
	}
	return nil
}

func (x *Article_Metadata) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Article_Metadata) GetTransformationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransformationTime
	}
	return nil
}

func (x *Article_Metadata) GetTransformationErrors() int64 {
	if x != nil {
		return x.TransformationErrors
	}
	return 0
}

func (x *Article_Metadata) GetLastModificationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModificationTime
	}
	return nil
}

func (x *Article_Metadata) GetEventSource() Article_Metadata_EventSource {
	if x != nil {
		return x.EventSource
	}
	return Article_Metadata_EVENT_SOURCE_UNSPECIFIED
}

func (x *Article_Metadata) GetSeoScore() float64 {
	if x != nil {
		return x.SeoScore
	}
	return 0
}

func (x *Article_Metadata) GetPublicationId() int64 {
	if x != nil {
		return x.PublicationId
	}
	return 0
}

// *
// Extracted keywords from the article body like persons, locations, organizations etc.
//
// | Field name              | Type              | Description                                                                                                                                                                                                                                                                                                           |
// |-------------------------|-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
// | `value`                 | `string`          | Unique value of this keyword.                                                                                                                                                                                                                                |
// | `type`                 | `string`          | Type/Category of this keyword like `location`, `organization`, `person`                                                                                                                                                                                                                                |
// | `score`                 | `float`          | Score for the relevance of this keyword set by the engine |
//
// @CodeBlockStart protobuf
type Article_Keyword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string  `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Type  string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Score float32 `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *Article_Keyword) Reset() {
	*x = Article_Keyword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article_Keyword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article_Keyword) ProtoMessage() {}

func (x *Article_Keyword) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article_Keyword.ProtoReflect.Descriptor instead.
func (*Article_Keyword) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Article_Keyword) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Article_Keyword) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Article_Keyword) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// *
// Asset of an [Element](article_>_element.html).
//
// An asset configuration is dependant upon its use, it may alter depending
// on its [`type`](#enum-type) field.
//
// | Field name | Type                  | Description                                                                                                                                    |
// |------------|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------|
// | `type`     | [`Type`][at]          | Type of the asset.                                                                                                                             |
// | `fields`   | `map<string, string>` | Generic map containing general content and configuration information of the asset. Clients must be resilient to unknown or missing entry sets. |
// | `metadata` | [`Metadata`][meta]    | Only present for `assets` of `TYPE.METADATA`. Technical metadata for the parent `element` (state, validity, ...). See [`Metadata`][meta]       |
//
// [at]: #enum-type
// [meta]: article_%3E_metadata.html
//
// @CodeBlockStart protobuf
type Article_Element_Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     Article_Element_Asset_Type `protobuf:"varint,1,opt,name=type,proto3,enum=stroeer.core.v1.Article_Element_Asset_Type" json:"type,omitempty"`
	Fields   map[string]string          `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metadata *Article_Metadata          `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"` //* @CodeBlockEnd
}

func (x *Article_Element_Asset) Reset() {
	*x = Article_Element_Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article_Element_Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article_Element_Asset) ProtoMessage() {}

func (x *Article_Element_Asset) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article_Element_Asset.ProtoReflect.Descriptor instead.
func (*Article_Element_Asset) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Article_Element_Asset) GetType() Article_Element_Asset_Type {
	if x != nil {
		return x.Type
	}
	return Article_Element_Asset_TYPE_UNSPECIFIED
}

func (x *Article_Element_Asset) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Article_Element_Asset) GetMetadata() *Article_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// *
// ## `BodyNode`
//
// Recursive structure representing all types of possible nodes inside an article.
//
// One use-case is to represent [HTML-like](#html-like) markup in tapir, but it
// is also used to map [custom](#custom) elements that require a strict
// positional placement within the textual body. Things that are not part of the
// textual article body are represented as individual [`Body`][b] parts so they
// can be rendered independently if required.
//
// Clients must be resilient to unknown or missing nodes.
//
// @CodeBlockStart protobuf
type Article_Body_BodyNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Text     string                   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Fields   map[string]string        `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Children []*Article_Body_BodyNode `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
	Elements []*Article_Element       `protobuf:"bytes,5,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *Article_Body_BodyNode) Reset() {
	*x = Article_Body_BodyNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article_Body_BodyNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article_Body_BodyNode) ProtoMessage() {}

func (x *Article_Body_BodyNode) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article_Body_BodyNode.ProtoReflect.Descriptor instead.
func (*Article_Body_BodyNode) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Article_Body_BodyNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Article_Body_BodyNode) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Article_Body_BodyNode) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Article_Body_BodyNode) GetChildren() []*Article_Body_BodyNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Article_Body_BodyNode) GetElements() []*Article_Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

var File_stroeer_core_v1_article_proto protoreflect.FileDescriptor

var file_stroeer_core_v1_article_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x8e, 0x1a, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x6f,
	0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72,
	0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x62, 0x6f, 0x64, 0x69,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x06, 0x62, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c,
	0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x6e, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x64, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xde, 0x06, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x6f,
	0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x6f,
	0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3e, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x1a, 0xee, 0x02,
	0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5e,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x05, 0x22, 0x95,
	0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x4f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x55, 0x54,
	0x48, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10,
	0x07, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x49, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x22, 0x48, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4f, 0x50, 0x45, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x45, 0x41, 0x53,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x03,
	0x1a, 0xb3, 0x04, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74,
	0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x36, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74,
	0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xbb, 0x02, 0x0a, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x72,
	0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x71, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0x05, 0x1a, 0xc5, 0x06, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4b, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x50, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72,
	0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6f, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x65, 0x6f, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10,
	0x03, 0x22, 0x5b, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x1a, 0x49,
	0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x54, 0x49,
	0x43, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02,
	0x1a, 0x02, 0x08, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x4d, 0x42, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x06, 0x41, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x07, 0x1a,
	0x02, 0x08, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10,
	0x08, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x64, 0x22,
	0xde, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x57, 0x53, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x59, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x41, 0x47, 0x45, 0x53, 0x41, 0x4e, 0x42, 0x52, 0x55, 0x43, 0x48, 0x10, 0x06, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x56, 0x45, 0x52, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x08, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x09,
	0x12, 0x08, 0x0a, 0x04, 0x51, 0x55, 0x49, 0x5a, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x41,
	0x4d, 0x45, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x43, 0x49, 0x50, 0x45, 0x10, 0x0d,
	0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2f, 0x67, 0x6f, 0x2d, 0x74, 0x61, 0x70, 0x69, 0x72, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stroeer_core_v1_article_proto_rawDescOnce sync.Once
	file_stroeer_core_v1_article_proto_rawDescData = file_stroeer_core_v1_article_proto_rawDesc
)

func file_stroeer_core_v1_article_proto_rawDescGZIP() []byte {
	file_stroeer_core_v1_article_proto_rawDescOnce.Do(func() {
		file_stroeer_core_v1_article_proto_rawDescData = protoimpl.X.CompressGZIP(file_stroeer_core_v1_article_proto_rawDescData)
	})
	return file_stroeer_core_v1_article_proto_rawDescData
}

var file_stroeer_core_v1_article_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_stroeer_core_v1_article_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_stroeer_core_v1_article_proto_goTypes = []interface{}{
	(Article_Type)(0),                 // 0: stroeer.core.v1.Article.Type
	(Article_SubType)(0),              // 1: stroeer.core.v1.Article.SubType
	(Article_Element_Type)(0),         // 2: stroeer.core.v1.Article.Element.Type
	(Article_Element_Relation)(0),     // 3: stroeer.core.v1.Article.Element.Relation
	(Article_Element_Asset_Type)(0),   // 4: stroeer.core.v1.Article.Element.Asset.Type
	(Article_Body_Type)(0),            // 5: stroeer.core.v1.Article.Body.Type
	(Article_Metadata_State)(0),       // 6: stroeer.core.v1.Article.Metadata.State
	(Article_Metadata_EventSource)(0), // 7: stroeer.core.v1.Article.Metadata.EventSource
	(*Article)(nil),                   // 8: stroeer.core.v1.Article
	nil,                               // 9: stroeer.core.v1.Article.FieldsEntry
	(*Article_Element)(nil),           // 10: stroeer.core.v1.Article.Element
	(*Article_Body)(nil),              // 11: stroeer.core.v1.Article.Body
	(*Article_Metadata)(nil),          // 12: stroeer.core.v1.Article.Metadata
	(*Article_Keyword)(nil),           // 13: stroeer.core.v1.Article.Keyword
	(*Article_Element_Asset)(nil),     // 14: stroeer.core.v1.Article.Element.Asset
	nil,                               // 15: stroeer.core.v1.Article.Element.Asset.FieldsEntry
	(*Article_Body_BodyNode)(nil),     // 16: stroeer.core.v1.Article.Body.BodyNode
	nil,                               // 17: stroeer.core.v1.Article.Body.BodyNode.FieldsEntry
	(*Reference)(nil),                 // 18: stroeer.core.v1.Reference
	(*timestamppb.Timestamp)(nil),     // 19: google.protobuf.Timestamp
}
var file_stroeer_core_v1_article_proto_depIdxs = []int32{
	0,  // 0: stroeer.core.v1.Article.type:type_name -> stroeer.core.v1.Article.Type
	1,  // 1: stroeer.core.v1.Article.sub_type:type_name -> stroeer.core.v1.Article.SubType
	18, // 2: stroeer.core.v1.Article.section_tree:type_name -> stroeer.core.v1.Reference
	9,  // 3: stroeer.core.v1.Article.fields:type_name -> stroeer.core.v1.Article.FieldsEntry
	11, // 4: stroeer.core.v1.Article.bodies:type_name -> stroeer.core.v1.Article.Body
	12, // 5: stroeer.core.v1.Article.metadata:type_name -> stroeer.core.v1.Article.Metadata
	10, // 6: stroeer.core.v1.Article.elements:type_name -> stroeer.core.v1.Article.Element
	13, // 7: stroeer.core.v1.Article.keywords:type_name -> stroeer.core.v1.Article.Keyword
	2,  // 8: stroeer.core.v1.Article.Element.type:type_name -> stroeer.core.v1.Article.Element.Type
	3,  // 9: stroeer.core.v1.Article.Element.relations:type_name -> stroeer.core.v1.Article.Element.Relation
	14, // 10: stroeer.core.v1.Article.Element.assets:type_name -> stroeer.core.v1.Article.Element.Asset
	10, // 11: stroeer.core.v1.Article.Element.children:type_name -> stroeer.core.v1.Article.Element
	16, // 12: stroeer.core.v1.Article.Body.children:type_name -> stroeer.core.v1.Article.Body.BodyNode
	5,  // 13: stroeer.core.v1.Article.Body.type:type_name -> stroeer.core.v1.Article.Body.Type
	6,  // 14: stroeer.core.v1.Article.Metadata.state:type_name -> stroeer.core.v1.Article.Metadata.State
	19, // 15: stroeer.core.v1.Article.Metadata.start_time:type_name -> google.protobuf.Timestamp
	19, // 16: stroeer.core.v1.Article.Metadata.end_time:type_name -> google.protobuf.Timestamp
	19, // 17: stroeer.core.v1.Article.Metadata.publish_time:type_name -> google.protobuf.Timestamp
	19, // 18: stroeer.core.v1.Article.Metadata.update_time:type_name -> google.protobuf.Timestamp
	19, // 19: stroeer.core.v1.Article.Metadata.transformation_time:type_name -> google.protobuf.Timestamp
	19, // 20: stroeer.core.v1.Article.Metadata.last_modification_time:type_name -> google.protobuf.Timestamp
	7,  // 21: stroeer.core.v1.Article.Metadata.event_source:type_name -> stroeer.core.v1.Article.Metadata.EventSource
	4,  // 22: stroeer.core.v1.Article.Element.Asset.type:type_name -> stroeer.core.v1.Article.Element.Asset.Type
	15, // 23: stroeer.core.v1.Article.Element.Asset.fields:type_name -> stroeer.core.v1.Article.Element.Asset.FieldsEntry
	12, // 24: stroeer.core.v1.Article.Element.Asset.metadata:type_name -> stroeer.core.v1.Article.Metadata
	17, // 25: stroeer.core.v1.Article.Body.BodyNode.fields:type_name -> stroeer.core.v1.Article.Body.BodyNode.FieldsEntry
	16, // 26: stroeer.core.v1.Article.Body.BodyNode.children:type_name -> stroeer.core.v1.Article.Body.BodyNode
	10, // 27: stroeer.core.v1.Article.Body.BodyNode.elements:type_name -> stroeer.core.v1.Article.Element
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_stroeer_core_v1_article_proto_init() }
func file_stroeer_core_v1_article_proto_init() {
	if File_stroeer_core_v1_article_proto != nil {
		return
	}
	file_stroeer_core_v1_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_stroeer_core_v1_article_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article_Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article_Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article_Keyword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article_Element_Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article_Body_BodyNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stroeer_core_v1_article_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stroeer_core_v1_article_proto_goTypes,
		DependencyIndexes: file_stroeer_core_v1_article_proto_depIdxs,
		EnumInfos:         file_stroeer_core_v1_article_proto_enumTypes,
		MessageInfos:      file_stroeer_core_v1_article_proto_msgTypes,
	}.Build()
	File_stroeer_core_v1_article_proto = out.File
	file_stroeer_core_v1_article_proto_rawDesc = nil
	file_stroeer_core_v1_article_proto_goTypes = nil
	file_stroeer_core_v1_article_proto_depIdxs = nil
}
