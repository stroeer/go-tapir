//*
// @FileArticle Article

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: stroeer/core/v1/article.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// ## `enum Type`
//
// | Enum value                  | Description                                                 |
// |-----------------------------|-------------------------------------------------------------|
// | `CONTENT_TYPE_UNSPECIFIED`  | unspecified                                                 |
// | `ARTICLE`                   | A text article, usually [_sub typed_][sub_type]             |
// | `IMAGE`                     | An image article, unused, deprecated                        |
// | `VIDEO`                     | A video article, contains HLS-videos, as well as external live streams or partner videos (glomex) |
// | `GALLERY`                   | A gallery article                                           |
// | `EMBED`                     | An embed article including an oembed or edge_side_include element |
// | `AUTHOR`                    | An author article, currently not implemented                |
// | `AGENCY`                    | An agency article, unused, deprecated                       |
// | `EXTERNAL`                  | An external article (teaser-like external article)          |
//
// [sub_type]: #enum-contentsubtype
//
type Article_Type int32

const (
	Article_TYPE_UNSPECIFIED Article_Type = 0
	Article_ARTICLE          Article_Type = 1
	// Deprecated: Do not use.
	Article_IMAGE   Article_Type = 2
	Article_VIDEO   Article_Type = 3
	Article_GALLERY Article_Type = 4
	Article_EMBED   Article_Type = 5
	Article_AUTHOR  Article_Type = 6
	// Deprecated: Do not use.
	Article_AGENCY   Article_Type = 7
	Article_EXTERNAL Article_Type = 8
)

// Enum value maps for Article_Type.
var (
	Article_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "ARTICLE",
		2: "IMAGE",
		3: "VIDEO",
		4: "GALLERY",
		5: "EMBED",
		6: "AUTHOR",
		7: "AGENCY",
		8: "EXTERNAL",
	}
	Article_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"ARTICLE":          1,
		"IMAGE":            2,
		"VIDEO":            3,
		"GALLERY":          4,
		"EMBED":            5,
		"AUTHOR":           6,
		"AGENCY":           7,
		"EXTERNAL":         8,
	}
)

func (x Article_Type) Enum() *Article_Type {
	p := new(Article_Type)
	*p = x
	return p
}

func (x Article_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[0].Descriptor()
}

func (Article_Type) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[0]
}

func (x Article_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_Type.Descriptor instead.
func (Article_Type) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 0}
}

//*
// ## `enum SubType`
// ```protobuf
// enum SubType {
//   // Not specified.
//   SUB_TYPE_UNSPECIFIED = 0;
//
//   // Meldung/Nachricht — this is the default
//   NEWS = 1;
//
//   // 'Kolumne'
//   COLUMN = 2;
//
//   // 'Kommentar'
//   COMMENTARY = 3;
//
//   // 'Interview'
//   INTERVIEW = 4;
//
//   // 'Pro und Kontra/Streitgespräch'
//   CONTROVERSY = 5;
//
//   // 'Tagesanbruch'
//   TAGESANBRUCH = 6;
//
//   // 'Evergreen'
//   EVERGREEN = 7;
//
//   // Content originally imported from agency/tickers by the CMS
//   AGENCY_IMPORT = 8;
//
//   // Advertorial
//   ADVERTORIAL = 9;
// }
// ```
type Article_SubType int32

const (
	// Not specified.
	Article_SUB_TYPE_UNSPECIFIED Article_SubType = 0
	// Meldung/Nachricht — this is the default
	Article_NEWS Article_SubType = 1
	// 'Kolumne'
	Article_COLUMN Article_SubType = 2
	// 'Kommentar'
	Article_COMMENTARY Article_SubType = 3
	// 'Interview'
	Article_INTERVIEW Article_SubType = 4
	// 'Pro und Kontra/Streitgespräch'
	Article_CONTROVERSY Article_SubType = 5
	// 'Tagesanbruch'
	Article_TAGESANBRUCH Article_SubType = 6
	// 'Evergreen'
	Article_EVERGREEN Article_SubType = 7
	// Content originally imported from agency/tickers by the CMS
	Article_AGENCY_IMPORT Article_SubType = 8
	// Advertorial
	Article_ADVERTORIAL Article_SubType = 9
)

// Enum value maps for Article_SubType.
var (
	Article_SubType_name = map[int32]string{
		0: "SUB_TYPE_UNSPECIFIED",
		1: "NEWS",
		2: "COLUMN",
		3: "COMMENTARY",
		4: "INTERVIEW",
		5: "CONTROVERSY",
		6: "TAGESANBRUCH",
		7: "EVERGREEN",
		8: "AGENCY_IMPORT",
		9: "ADVERTORIAL",
	}
	Article_SubType_value = map[string]int32{
		"SUB_TYPE_UNSPECIFIED": 0,
		"NEWS":                 1,
		"COLUMN":               2,
		"COMMENTARY":           3,
		"INTERVIEW":            4,
		"CONTROVERSY":          5,
		"TAGESANBRUCH":         6,
		"EVERGREEN":            7,
		"AGENCY_IMPORT":        8,
		"ADVERTORIAL":          9,
	}
)

func (x Article_SubType) Enum() *Article_SubType {
	p := new(Article_SubType)
	*p = x
	return p
}

func (x Article_SubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_SubType) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[1].Descriptor()
}

func (Article_SubType) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[1]
}

func (x Article_SubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_SubType.Descriptor instead.
func (Article_SubType) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 1}
}

//*
// ## `type`
//
// Type of an element.
//
// ```protobuf
//   enum ElementType {
//   // Not specified, not supported or yet unknown.
//   ELEMENT_TYPE_UNSPECIFIED = 0;
//
//   // An article element.
//   ARTICLE = 1;
//
//   // An image element.
//   IMAGE = 2;
//
//   // A video element.
//   VIDEO = 3;
//
//   // A gallery element.
//   GALLERY = 4;
//
//   // An oembed element.
//   OEMBED = 5;
//
//   // An author element.
//   AUTHOR = 6;
//
//   // An agency (e.g. DPA) element.
//   AGENCY = 7;
//
//   // An element that represents a <esi:include>, it's important
//   // to be rendered server side due to SEO reasons
//   EDGE_SIDE_INCLUDE = 8;
//
//   // A citation element.
//   CITATION = 9;
// }
// ```
type Article_Element_Type int32

const (
	// Not specified, not supported or yet unknown.
	Article_Element_TYPE_UNSPECIFIED Article_Element_Type = 0
	// An article element.
	Article_Element_ARTICLE Article_Element_Type = 1
	// An image element.
	Article_Element_IMAGE Article_Element_Type = 2
	// A video element.
	Article_Element_VIDEO Article_Element_Type = 3
	// A gallery element.
	Article_Element_GALLERY Article_Element_Type = 4
	// An oembed element.
	Article_Element_OEMBED Article_Element_Type = 5
	// An author element.
	Article_Element_AUTHOR Article_Element_Type = 6
	// An agency (e.g. DPA) element.
	Article_Element_AGENCY Article_Element_Type = 7
	// An element that represents a <esi:include>, it's important
	// to be rendered server side due to SEO reasons
	Article_Element_EDGE_SIDE_INCLUDE Article_Element_Type = 8
	// A citation element.
	Article_Element_CITATION Article_Element_Type = 9
)

// Enum value maps for Article_Element_Type.
var (
	Article_Element_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "ARTICLE",
		2: "IMAGE",
		3: "VIDEO",
		4: "GALLERY",
		5: "OEMBED",
		6: "AUTHOR",
		7: "AGENCY",
		8: "EDGE_SIDE_INCLUDE",
		9: "CITATION",
	}
	Article_Element_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":  0,
		"ARTICLE":           1,
		"IMAGE":             2,
		"VIDEO":             3,
		"GALLERY":           4,
		"OEMBED":            5,
		"AUTHOR":            6,
		"AGENCY":            7,
		"EDGE_SIDE_INCLUDE": 8,
		"CITATION":          9,
	}
)

func (x Article_Element_Type) Enum() *Article_Element_Type {
	p := new(Article_Element_Type)
	*p = x
	return p
}

func (x Article_Element_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_Element_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[2].Descriptor()
}

func (Article_Element_Type) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[2]
}

func (x Article_Element_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_Element_Type.Descriptor instead.
func (Article_Element_Type) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 1, 0}
}

//*
// ## Enum Relation
// ```protobuf
// enum Relation {
//   // Not specified.
//   RELATION_UNSPECIFIED = 0;
//
//   // As an opener element
//   OPENER = 1;
//
//   // As an teaser element
//   TEASER = 2;
// }
// ```
// Relation or usage of an element
type Article_Element_Relation int32

const (
	// Not specified.
	Article_Element_RELATION_UNSPECIFIED Article_Element_Relation = 0
	// As an opener element (within the content)
	Article_Element_OPENER Article_Element_Relation = 1
	// As an teaser element (when externally viewed)
	Article_Element_TEASER Article_Element_Relation = 2
)

// Enum value maps for Article_Element_Relation.
var (
	Article_Element_Relation_name = map[int32]string{
		0: "RELATION_UNSPECIFIED",
		1: "OPENER",
		2: "TEASER",
	}
	Article_Element_Relation_value = map[string]int32{
		"RELATION_UNSPECIFIED": 0,
		"OPENER":               1,
		"TEASER":               2,
	}
)

func (x Article_Element_Relation) Enum() *Article_Element_Relation {
	p := new(Article_Element_Relation)
	*p = x
	return p
}

func (x Article_Element_Relation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_Element_Relation) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[3].Descriptor()
}

func (Article_Element_Relation) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[3]
}

func (x Article_Element_Relation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_Element_Relation.Descriptor instead.
func (Article_Element_Relation) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 1, 1}
}

//*
// ## `enum AssetType`
//
// Type of an asset.
// ```protobuf
//   enum AssetType {
//
//   // Not specified.
//   ASSET_TYPE_UNSPECIFIED = 0;
//
//   // An image asset.
//   IMAGE = 1;
//
//   // A video asset.
//   VIDEO = 2;
//
//   // An external video asset (e.g. "glomex")
//   EXTERNAL_VIDEO = 3;
//
//   // A metadata asset.
//   METADATA = 4;
// }
// ```
type Article_Element_Asset_Type int32

const (
	// Not specified.
	Article_Element_Asset_TYPE_UNSPECIFIED Article_Element_Asset_Type = 0
	// An image asset.
	Article_Element_Asset_IMAGE Article_Element_Asset_Type = 1
	// A video asset.
	Article_Element_Asset_VIDEO Article_Element_Asset_Type = 2
	// An external video asset (e.g. "glomex")
	Article_Element_Asset_EXTERNAL_VIDEO Article_Element_Asset_Type = 3
	// A metadata asset.
	Article_Element_Asset_METADATA Article_Element_Asset_Type = 4
)

// Enum value maps for Article_Element_Asset_Type.
var (
	Article_Element_Asset_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "IMAGE",
		2: "VIDEO",
		3: "EXTERNAL_VIDEO",
		4: "METADATA",
	}
	Article_Element_Asset_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"IMAGE":            1,
		"VIDEO":            2,
		"EXTERNAL_VIDEO":   3,
		"METADATA":         4,
	}
)

func (x Article_Element_Asset_Type) Enum() *Article_Element_Asset_Type {
	p := new(Article_Element_Asset_Type)
	*p = x
	return p
}

func (x Article_Element_Asset_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_Element_Asset_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[4].Descriptor()
}

func (Article_Element_Asset_Type) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[4]
}

func (x Article_Element_Asset_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_Element_Asset_Type.Descriptor instead.
func (Article_Element_Asset_Type) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

//*
// ```protobuf
// enum ContentType {
//   // Not specified.
//   Content_TYPE_UNSPECIFIED = 0;
//
//   // The article body incl. all inline elements.
//   BODY = 1;
//
//   // A wrapper for all article sources ("Quellenaparat"). There can only be one of these per article.
//   ARTICLE_SOURCES = 2;
//
//   // A article disclaimer with important notes/legal stuff. E.g. "medizinischer Hinweis" on all medical articles
//   DISCLAIMER = 3;
//
//   // Includes information what the current article type is (e.g. opinion article). There can only be one of these per article.
//   TRUST_BOX = 4;
// }
// ```
// Recursive structure representing all types of possible nodes inside an article.
//
// Clients must be resilient to unknown or missing nodes.
type Article_Body_Type int32

const (
	// Not specified.
	Article_Body_TYPE_UNSPECIFIED Article_Body_Type = 0
	// The article body incl. all inline elements.
	Article_Body_BODY Article_Body_Type = 1
	// A wrapper for all article sources ("Quellenaparat"). There can only be one of these per article.
	Article_Body_ARTICLE_SOURCES Article_Body_Type = 2
	// A article disclaimer with important notes/legal stuff. E.g. "medizinischer Hinweis" on all medical articles
	Article_Body_DISCLAIMER Article_Body_Type = 3
	// Includes information what the current article type is (e.g. opinion article). There can only be one of these per article.
	Article_Body_TRUST_BOX         Article_Body_Type = 4
	Article_Body_TABLE_OF_CONTENTS Article_Body_Type = 5
)

// Enum value maps for Article_Body_Type.
var (
	Article_Body_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "BODY",
		2: "ARTICLE_SOURCES",
		3: "DISCLAIMER",
		4: "TRUST_BOX",
		5: "TABLE_OF_CONTENTS",
	}
	Article_Body_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":  0,
		"BODY":              1,
		"ARTICLE_SOURCES":   2,
		"DISCLAIMER":        3,
		"TRUST_BOX":         4,
		"TABLE_OF_CONTENTS": 5,
	}
)

func (x Article_Body_Type) Enum() *Article_Body_Type {
	p := new(Article_Body_Type)
	*p = x
	return p
}

func (x Article_Body_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_Body_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[5].Descriptor()
}

func (Article_Body_Type) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[5]
}

func (x Article_Body_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_Body_Type.Descriptor instead.
func (Article_Body_Type) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 2, 0}
}

//*
// ## `enum State`
//
// State of the item ([`Article`](article.html), [`Element`](element.html))
// in the content management system. The `state` in combination with
// [start_time](#start_time) and [end_time](#end_time) determines whether or not
// this item should be rendered; this must be respected by all consumers especially
// when content is duplicated or cached.
//
// The terms `deleted` (articles) and `archived` (media lib) are interchangeable/synonyms.
// This enum combines those two into `State.DELETED`. An Article is in `State.DELETED`
// if it was deleted in the content management system, or if it's [end_time](#end_time)
// has been reached.
//
// An Article is in `State.DRAFT` if it has never been published, or if the
// [start_time](#start_time) lies in the future.
//
// ```protobuf
// enum State {
//   STATE_UNSPECIFIED = 0;
//   PUBLISHED = 1;
//   DELETED = 2;
//   DRAFT = 3;
// }
// ```
type Article_Metadata_State int32

const (
	Article_Metadata_STATE_UNSPECIFIED Article_Metadata_State = 0
	Article_Metadata_PUBLISHED         Article_Metadata_State = 1
	Article_Metadata_DELETED           Article_Metadata_State = 2
	Article_Metadata_DRAFT             Article_Metadata_State = 3
)

// Enum value maps for Article_Metadata_State.
var (
	Article_Metadata_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PUBLISHED",
		2: "DELETED",
		3: "DRAFT",
	}
	Article_Metadata_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PUBLISHED":         1,
		"DELETED":           2,
		"DRAFT":             3,
	}
)

func (x Article_Metadata_State) Enum() *Article_Metadata_State {
	p := new(Article_Metadata_State)
	*p = x
	return p
}

func (x Article_Metadata_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_Metadata_State) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[6].Descriptor()
}

func (Article_Metadata_State) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[6]
}

func (x Article_Metadata_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_Metadata_State.Descriptor instead.
func (Article_Metadata_State) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 3, 0}
}

//*
// ```protobuf
// message Article {}
// ```
// An article represents a piece of content created in the content management
// system. Different types of content like text or video articles share
// the same message structure, they can be distinguished by the [`Article.type`](#type) field.
//
// Depending on the service used to retrieve an article, this message might
// only contain data required on section pages (e.g. with `Article.body` set to `null`
// thus not containing any data that is only required on detail pages). This is sometimes
// referred to as _Teaser_.
//
type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// ## `id`
	// ```protobuf
	// int64 id = 1;
	// ```
	// Unique ID of the article defined by the content management system (required).
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//*
	// ## `type`
	// ```protobuf
	// ContentType type = 2;
	// ```
	// Main content type of the article (required).
	// See list of supported [`ContentType`](#enum-contenttype)
	Type Article_Type `protobuf:"varint,2,opt,name=type,proto3,enum=stroeer.core.v1.Article_Type" json:"type,omitempty"`
	//*
	// ## `sub_type`
	// ```protobuf
	// ContentSubType sub_type = 3;
	// ```
	// Subtype of the article. For `CONTENT_TYPE_ARTICLE` this field holds a
	// sub type, for others like `CONTENT_TYPE_GALLERY` it may not.
	// See list of supported [`ContentSubType`](#enum-contentsubtype)
	//
	SubType Article_SubType `protobuf:"varint,3,opt,name=sub_type,json=subType,proto3,enum=stroeer.core.v1.Article_SubType" json:"sub_type,omitempty"`
	//*
	// ## `section_tree`
	// ```protobuf
	// stroeer.core.v1.Reference section_tree = 4;
	// ```
	// Hierarchical section tree information of the article (required).
	// See [`Reference`](reference.html)
	//
	// Sample:
	// ```javascript
	// {
	//   "label": "Home"
	//   "href": "/",
	//   "children": [
	//         "label": "Spielwiese (Tests)",
	//         "href": "/test-playground/"
	//   ]
	// }
	// ```
	SectionTree *Reference `protobuf:"bytes,4,opt,name=section_tree,json=sectionTree,proto3" json:"section_tree,omitempty"`
	//*
	// ## `fields`
	// ```protobuf
	// map<string, string> fields = 5;
	// ```
	//
	// Generic map containing general content and configuration information of
	// the article (required).
	//
	// The entry set is defined by the content management system and
	// will vary depending on the main type of the article.
	//
	// ⚠ Clients must be resilient to unknown or missing entries. ⚠
	//
	// ### For `CONTENT_TYPE_ARTICLE`
	//
	// this map will contain the following data:
	//
	// | key | mandatory |description |
	// | --- | --------- | ------------|
	// | `headline` | * | the headline for this content |
	// | `top_line` | * | "dachzeile" |
	// | `ref_path` | * | URL path for this article e.g. `/${section_tree}/id_${id}/${title}.html` |
	// | `ref_canonical`| * | Canonical URL of this article, may differ if external, e.g. https://www.example.com/external.html |
	// | `ref_amp` | * | AMP URL of this article |
	// | `summary` | | summary for this content |
	// | `teaser_text` | | used on teasers, overrides `summary` |
	// | `meta_robots` | | |
	// | `social_headline` | | used for social markup, overrides `headline` |
	// | `headline_short` | | used for "Schlagzeilen", overrides `headline` |
	// | `meta_title` | | HTML `<meta title>` |
	// | `expert_line` | | |
	// | `social_description` | | |
	// | `meta_description` | | HTML `<meta description>` |
	// | `reading_time_minutes` | | estimated reading time in minutes |
	//
	// ### For `CONTENT_TYPE_GALLERY`
	//
	// this map will contain the following data:
	//
	// | key | mandatory |description |
	// | --- | --------- | ------------|
	// | `headline` | * | the headline for this content |
	//
	//
	Fields map[string]string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//*
	// ## `parts`
	// ```protobuf
	// repeated Part parts = 6;
	// ```
	// Recursive body structure of the article to render on detail pages. See [`BodyNode`](bodynode.html)
	//
	// This field will be `empty`/`null` for the teaser representation (e.g. section or overview pages) of the article.
	Bodies []*Article_Body `protobuf:"bytes,6,rep,name=bodies,proto3" json:"bodies,omitempty"`
	//*
	// ## `metadata`
	// ```protobuf
	// Metadata metadata = 7;
	// ```
	// Article metadata like publication state and technical timestamps. See [`Metadata`](metadata.html)
	Metadata *Article_Metadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	//*
	// ## `elements`
	// ```protobuf
	// repeated Element elements = 8;
	// ```
	// Elements of the article which are not part of the body, e.g. author information
	// opener image/video etc. Those elements should be used to render the article
	// as a teaser e.g. on section pages. See [`Element`](element.html)
	Elements []*Article_Element `protobuf:"bytes,8,rep,name=elements,proto3" json:"elements,omitempty"`
	//*
	// ## `keywords`
	// ```protobuf
	// repeated Keyword keywords = 9;
	// ```
	// Extracted keywords from the article body like persons, locations, organizations etc.
	Keywords []*Article_Keyword `protobuf:"bytes,9,rep,name=keywords,proto3" json:"keywords,omitempty"`
	//*
	// ## `onwards`
	// ```protobuf
	// repeated int64 onwards = 10;
	// ```
	// IDs of articles related to this article.
	//
	// Related articles are defined manually in the content management system
	// by the editorial department.
	Onwards []int64 `protobuf:"varint,10,rep,packed,name=onwards,proto3" json:"onwards,omitempty"`
	//*
	// ## `entities`
	// ```protobuf
	// repeated string entities = 100;
	// ```
	// Extracted entities from the article body like persons, locations, organizations etc.
	//
	// `entities` are deprecated and should not be used by clients, use `keywords` instead.
	//
	// Deprecated: Do not use.
	Entities []string `protobuf:"bytes,100,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0}
}

func (x *Article) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Article) GetType() Article_Type {
	if x != nil {
		return x.Type
	}
	return Article_TYPE_UNSPECIFIED
}

func (x *Article) GetSubType() Article_SubType {
	if x != nil {
		return x.SubType
	}
	return Article_SUB_TYPE_UNSPECIFIED
}

func (x *Article) GetSectionTree() *Reference {
	if x != nil {
		return x.SectionTree
	}
	return nil
}

func (x *Article) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Article) GetBodies() []*Article_Body {
	if x != nil {
		return x.Bodies
	}
	return nil
}

func (x *Article) GetMetadata() *Article_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Article) GetElements() []*Article_Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *Article) GetKeywords() []*Article_Keyword {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Article) GetOnwards() []int64 {
	if x != nil {
		return x.Onwards
	}
	return nil
}

// Deprecated: Do not use.
func (x *Article) GetEntities() []string {
	if x != nil {
		return x.Entities
	}
	return nil
}

//*
// ```protobuf
// message Element {}
// ```
// Elements of the article which are not part of the body, e.g. author information
// opener image/video etc. Those elements should be used to render the article
// as a teaser e.g. on section pages.
//
// Different types of elements like images or videos share
// the same message structure distinguished by the `ElementType` field.
type Article_Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// ## `type`
	// ```protobuf
	// Type type = 1;
	// ```
	// [`Type`](#type-1) of the element.
	Type Article_Element_Type `protobuf:"varint,1,opt,name=type,proto3,enum=stroeer.core.v1.Article_Element_Type" json:"type,omitempty"`
	//*
	// ## `relations`
	// ```protobuf
	// repeated Relation relations = 2;
	// ```
	// The usages (relations) of an element.
	// Example:
	// One image element with the relations `teaser` and `opener` is used for
	// both places. See [`enum Relation`](#enum-elementrelation)
	Relations []Article_Element_Relation `protobuf:"varint,2,rep,packed,name=relations,proto3,enum=stroeer.core.v1.Article_Element_Relation" json:"relations,omitempty"`
	//*
	// ## `asset`
	// ```protobuf
	// repeated Asset assets = 3;
	// ```
	// [`Asset(s)`](asset.html) of the element like images, videos or metadata (required).
	Assets []*Article_Element_Asset `protobuf:"bytes,3,rep,name=assets,proto3" json:"assets,omitempty"`
	//*
	// ## `children`
	// ```protobuf
	// repeated Element children = 4;
	// ```
	// Children of the element. Some Elements can have nested elements themself,
	// see sample section for `video` and `gallery` elements.
	Children []*Article_Element `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *Article_Element) Reset() {
	*x = Article_Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article_Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article_Element) ProtoMessage() {}

func (x *Article_Element) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article_Element.ProtoReflect.Descriptor instead.
func (*Article_Element) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Article_Element) GetType() Article_Element_Type {
	if x != nil {
		return x.Type
	}
	return Article_Element_TYPE_UNSPECIFIED
}

func (x *Article_Element) GetRelations() []Article_Element_Relation {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *Article_Element) GetAssets() []*Article_Element_Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Article_Element) GetChildren() []*Article_Element {
	if x != nil {
		return x.Children
	}
	return nil
}

//*
// ```protobuf
// message Content {}
// ```
//
type Article_Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// ## `children`
	// ```protobuf
	// repeated Item items = 1;
	// ```
	// Recursive Items nodes.
	Children []*Article_Body_BodyNode `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
	Type     Article_Body_Type        `protobuf:"varint,2,opt,name=type,proto3,enum=stroeer.core.v1.Article_Body_Type" json:"type,omitempty"`
}

func (x *Article_Body) Reset() {
	*x = Article_Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article_Body) ProtoMessage() {}

func (x *Article_Body) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article_Body.ProtoReflect.Descriptor instead.
func (*Article_Body) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Article_Body) GetChildren() []*Article_Body_BodyNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Article_Body) GetType() Article_Body_Type {
	if x != nil {
		return x.Type
	}
	return Article_Body_TYPE_UNSPECIFIED
}

//*
// ```protobuf
// message Metadata {}
// ```
// Article metadata like publication state and technical timestamps.
type Article_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// ## `state`
	// ```protobuf
	// State state = 1;
	// ```
	// State of the article in the content management system. See [`enum State`](#enum-state)
	State Article_Metadata_State `protobuf:"varint,1,opt,name=state,proto3,enum=stroeer.core.v1.Article_Metadata_State" json:"state,omitempty"`
	//*
	// ## `start_time`
	// ```protobuf
	// google.protobuf.Timestamp start_time = 2;
	// ```
	// Manually set editorial timestamp (_Gültig von_) at which the article is valid to deliver on
	// digital platforms in seconds of UTC time since Unix epoch.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	//*
	// ## `end_time`
	// ```protobuf
	// google.protobuf.Timestamp end_time = 3;
	// ```
	// Manually set editorial date (_Gültig bis_) till the article is valid to deliver on
	// digital platforms in seconds of UTC time since Unix epoch.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	//*
	// ## `publish_time`
	// ```protobuf
	// google.protobuf.Timestamp publish_time = 4;
	// ```
	// Editorial date (_Publikationsdatum_) of the first publication of the
	// article in seconds of UTC time since Unix epoch.
	//
	// This date will be set automatically by the content management system.
	PublishTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	//*
	// ## `update_time`
	// ```protobuf
	// google.protobuf.Timestamp update_time = 5;
	// ```
	// Editorial date (_Aktualisierungsdatum_) at which the article
	// was updated in seconds of UTC time since Unix epoch.
	//
	// On first publication this timestamp matches `publish_time`. Afterwards
	// it's either updated manually in the content management system or
	// automatically if the article content changed significantly.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	//*
	// ## `transformation_time`
	// ```protobuf
	// google.protobuf.Timestamp transformation_time = 6;
	// ```
	// Technical timestamp at which the article was transformed in the
	// API layer in seconds of UTC time since Unix epoch.
	TransformationTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=transformation_time,json=transformationTime,proto3" json:"transformation_time,omitempty"`
	//*
	// ## `transformation_errors`
	//```protobuf
	// int64 transformation_errors = 7;
	//```
	// Number of errors occurred while fetching and/or transforming optional
	// article components (e.g. embeds) to an `article` message.
	TransformationErrors int64 `protobuf:"varint,7,opt,name=transformation_errors,json=transformationErrors,proto3" json:"transformation_errors,omitempty"`
}

func (x *Article_Metadata) Reset() {
	*x = Article_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article_Metadata) ProtoMessage() {}

func (x *Article_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article_Metadata.ProtoReflect.Descriptor instead.
func (*Article_Metadata) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Article_Metadata) GetState() Article_Metadata_State {
	if x != nil {
		return x.State
	}
	return Article_Metadata_STATE_UNSPECIFIED
}

func (x *Article_Metadata) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Article_Metadata) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Article_Metadata) GetPublishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishTime
	}
	return nil
}

func (x *Article_Metadata) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Article_Metadata) GetTransformationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransformationTime
	}
	return nil
}

func (x *Article_Metadata) GetTransformationErrors() int64 {
	if x != nil {
		return x.TransformationErrors
	}
	return 0
}

//*
// ```protobuf
// message Keyword {}
// ```
// Extracted keywords from the article body like persons, locations, organizations etc.
type Article_Keyword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// ## `value`
	// ```protobuf
	// string value = 1;
	// ```
	// Unique value of this keyword.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	//*
	// ## `type`
	// ```protobuf
	// string type = 2;
	// ```
	// Type of this keyword like `location`, `organization`, `person`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Article_Keyword) Reset() {
	*x = Article_Keyword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article_Keyword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article_Keyword) ProtoMessage() {}

func (x *Article_Keyword) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article_Keyword.ProtoReflect.Descriptor instead.
func (*Article_Keyword) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Article_Keyword) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Article_Keyword) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Article_Element_Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// ## `type`
	// Type of the asset. See [`AssetType`](#assettype)
	// ```protobuf
	//AssetType type = 1;
	//```
	Type Article_Element_Asset_Type `protobuf:"varint,1,opt,name=type,proto3,enum=stroeer.core.v1.Article_Element_Asset_Type" json:"type,omitempty"`
	//*
	// ## `fields`
	// ```protobuf
	// map<string, string> fields = 2;
	// ```
	// Generic map containing general content and configuration information of
	// the asset.
	//
	// Clients must be resilient to unknown or missing entry sets.
	//
	Fields map[string]string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//*
	// ## `metadata`
	// ```protobuf
	// Metadata metadata = 3;
	// ```
	// Technical metadata for this asset (state, validity, ...). See [`Metadata`](metadata.html)
	Metadata *Article_Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Article_Element_Asset) Reset() {
	*x = Article_Element_Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article_Element_Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article_Element_Asset) ProtoMessage() {}

func (x *Article_Element_Asset) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article_Element_Asset.ProtoReflect.Descriptor instead.
func (*Article_Element_Asset) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Article_Element_Asset) GetType() Article_Element_Asset_Type {
	if x != nil {
		return x.Type
	}
	return Article_Element_Asset_TYPE_UNSPECIFIED
}

func (x *Article_Element_Asset) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Article_Element_Asset) GetMetadata() *Article_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//*
// ```protobuf
// message ContentNode {}
// ```
// Recursive structure representing all types of possible nodes inside an article.
//
// Clients must be resilient to unknown or missing nodes.
type Article_Body_BodyNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// ## `type`
	// ```protobuf
	// string type = 1;
	// ```
	// Type of the node (required).
	//
	// ### HTML `types`
	// | type | description |
	// | -----| ------------|
	// | `text` | most basic `type`, its text value can be found in the `text` field. The `word_count` can be found in the `BodyNode.fields` for each `BodyNode[type=text]` |
	// | `p` | `paragraph` / `<p>`  |
	// | `span` | todo / `<span>`  |
	// | `sub_headline` | a sub headline, may be part of the _table of contents_  |
	// | `a` | `anchor` / `<a>`  |
	// | `strong` | `strong` / `<strong>` |
	// | `em` | `emphasis` / `<em>` |
	// | `br` | `line break` / `<br>` |
	// | `ul` | `unordered list` / `<ul>` |
	// | `ol` | `ordered list` / `<ol>` |
	// | `li` | `list` / `<li>`  |
	// | `table` | `table` / `<table>`  |
	// | `thead` | `table head` / `<thead>`  |
	// | `tbody` | `table body` / `<tbody>`  |
	// | `tfoot` | `table footer` / `<tfoot>`  |
	// | `th` | `table header` / `<th>`  |
	// | `tr` | `table row` / `<tr>`  |
	// | `td` | `table data cell` / `<td>`  |
	//
	// ### Custom `types`
	// | type | description |
	// | -----| ------------|
	// | `img` | inline image element, check `elements` |
	// | `video` | inline video element, check `elements` |
	// | `gallery` | inline gallery element, check `elements` |
	// | `oembed` | inline oEmbed element, check `elements` |
	// | `esi` | inline edge side include element, check `elements` |
	// | `quote` | inline quotation element, check `elements` |
	// | `infobox` | todo |
	// | `toc` | todo |
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	//*
	// ## `text`
	//  ```protobuf
	// string text = 2;
	// ```
	// Text of the node, only set for text nodes (`type == 'text'`).
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	//*
	// ## `fields`
	// ```protobuf
	// map<string, string> fields = 3;
	// ```
	// Additional information for the node depending on it's type,
	// e.g. `href` for `a` nodes.
	Fields map[string]string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//*
	// ## `children`
	// ```protobuf
	// repeated BodyNode children = 4;
	// ```
	// Nested Items, e.g. the `text` of a `<p>` or a `<a>`.
	Children []*Article_Body_BodyNode `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
	//*
	// ## `elements`
	// ```protobuf
	// repeated Element elements = 5;
	// ```
	// [Elements](element.html) of the node, e.g. video, image, gallery, embed, ...
	Elements []*Article_Element `protobuf:"bytes,5,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *Article_Body_BodyNode) Reset() {
	*x = Article_Body_BodyNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article_Body_BodyNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article_Body_BodyNode) ProtoMessage() {}

func (x *Article_Body_BodyNode) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article_Body_BodyNode.ProtoReflect.Descriptor instead.
func (*Article_Body_BodyNode) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Article_Body_BodyNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Article_Body_BodyNode) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Article_Body_BodyNode) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Article_Body_BodyNode) GetChildren() []*Article_Body_BodyNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Article_Body_BodyNode) GetElements() []*Article_Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

var File_stroeer_core_v1_article_proto protoreflect.FileDescriptor

var file_stroeer_core_v1_article_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xdf, 0x16, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x6f,
	0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72,
	0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x62, 0x6f, 0x64, 0x69,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x06, 0x62, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c,
	0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x6e, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x64, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xc8, 0x06, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x6f,
	0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x6f,
	0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3e, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x1a, 0xe4, 0x02,
	0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x54,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x04, 0x22, 0x95, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52,
	0x59, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x44, 0x47, 0x45, 0x5f,
	0x53, 0x49, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x08, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x22, 0x3c, 0x0a, 0x08,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x54, 0x45, 0x41, 0x53, 0x45, 0x52, 0x10, 0x02, 0x1a, 0xb3, 0x04, 0x0a, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x42, 0x6f, 0x64, 0x79, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x42, 0x6f, 0x64, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a,
	0xbb, 0x02, 0x0a, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x42, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x64,
	0x79, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x71, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x4f, 0x44, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49,
	0x53, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52,
	0x55, 0x53, 0x54, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x05,
	0x1a, 0x80, 0x04, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73,
	0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x45, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46,
	0x54, 0x10, 0x03, 0x1a, 0x33, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x54, 0x49, 0x43,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x1a,
	0x02, 0x08, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4d, 0x42, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x10, 0x06, 0x12, 0x0e, 0x0a, 0x06, 0x41, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x07, 0x1a, 0x02,
	0x08, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x08,
	0x22, 0xae, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x57, 0x53, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x59, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x41, 0x47, 0x45, 0x53, 0x41, 0x4e, 0x42, 0x52, 0x55, 0x43, 0x48, 0x10, 0x06, 0x12, 0x0d,
	0x0a, 0x09, 0x45, 0x56, 0x45, 0x52, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x07, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x08,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x10,
	0x09, 0x42, 0x40, 0x0a, 0x12, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2f, 0x67, 0x6f,
	0x2d, 0x74, 0x61, 0x70, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x63,
	0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stroeer_core_v1_article_proto_rawDescOnce sync.Once
	file_stroeer_core_v1_article_proto_rawDescData = file_stroeer_core_v1_article_proto_rawDesc
)

func file_stroeer_core_v1_article_proto_rawDescGZIP() []byte {
	file_stroeer_core_v1_article_proto_rawDescOnce.Do(func() {
		file_stroeer_core_v1_article_proto_rawDescData = protoimpl.X.CompressGZIP(file_stroeer_core_v1_article_proto_rawDescData)
	})
	return file_stroeer_core_v1_article_proto_rawDescData
}

var file_stroeer_core_v1_article_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_stroeer_core_v1_article_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_stroeer_core_v1_article_proto_goTypes = []interface{}{
	(Article_Type)(0),               // 0: stroeer.core.v1.Article.Type
	(Article_SubType)(0),            // 1: stroeer.core.v1.Article.SubType
	(Article_Element_Type)(0),       // 2: stroeer.core.v1.Article.Element.Type
	(Article_Element_Relation)(0),   // 3: stroeer.core.v1.Article.Element.Relation
	(Article_Element_Asset_Type)(0), // 4: stroeer.core.v1.Article.Element.Asset.Type
	(Article_Body_Type)(0),          // 5: stroeer.core.v1.Article.Body.Type
	(Article_Metadata_State)(0),     // 6: stroeer.core.v1.Article.Metadata.State
	(*Article)(nil),                 // 7: stroeer.core.v1.Article
	nil,                             // 8: stroeer.core.v1.Article.FieldsEntry
	(*Article_Element)(nil),         // 9: stroeer.core.v1.Article.Element
	(*Article_Body)(nil),            // 10: stroeer.core.v1.Article.Body
	(*Article_Metadata)(nil),        // 11: stroeer.core.v1.Article.Metadata
	(*Article_Keyword)(nil),         // 12: stroeer.core.v1.Article.Keyword
	(*Article_Element_Asset)(nil),   // 13: stroeer.core.v1.Article.Element.Asset
	nil,                             // 14: stroeer.core.v1.Article.Element.Asset.FieldsEntry
	(*Article_Body_BodyNode)(nil),   // 15: stroeer.core.v1.Article.Body.BodyNode
	nil,                             // 16: stroeer.core.v1.Article.Body.BodyNode.FieldsEntry
	(*Reference)(nil),               // 17: stroeer.core.v1.Reference
	(*timestamppb.Timestamp)(nil),   // 18: google.protobuf.Timestamp
}
var file_stroeer_core_v1_article_proto_depIdxs = []int32{
	0,  // 0: stroeer.core.v1.Article.type:type_name -> stroeer.core.v1.Article.Type
	1,  // 1: stroeer.core.v1.Article.sub_type:type_name -> stroeer.core.v1.Article.SubType
	17, // 2: stroeer.core.v1.Article.section_tree:type_name -> stroeer.core.v1.Reference
	8,  // 3: stroeer.core.v1.Article.fields:type_name -> stroeer.core.v1.Article.FieldsEntry
	10, // 4: stroeer.core.v1.Article.bodies:type_name -> stroeer.core.v1.Article.Body
	11, // 5: stroeer.core.v1.Article.metadata:type_name -> stroeer.core.v1.Article.Metadata
	9,  // 6: stroeer.core.v1.Article.elements:type_name -> stroeer.core.v1.Article.Element
	12, // 7: stroeer.core.v1.Article.keywords:type_name -> stroeer.core.v1.Article.Keyword
	2,  // 8: stroeer.core.v1.Article.Element.type:type_name -> stroeer.core.v1.Article.Element.Type
	3,  // 9: stroeer.core.v1.Article.Element.relations:type_name -> stroeer.core.v1.Article.Element.Relation
	13, // 10: stroeer.core.v1.Article.Element.assets:type_name -> stroeer.core.v1.Article.Element.Asset
	9,  // 11: stroeer.core.v1.Article.Element.children:type_name -> stroeer.core.v1.Article.Element
	15, // 12: stroeer.core.v1.Article.Body.children:type_name -> stroeer.core.v1.Article.Body.BodyNode
	5,  // 13: stroeer.core.v1.Article.Body.type:type_name -> stroeer.core.v1.Article.Body.Type
	6,  // 14: stroeer.core.v1.Article.Metadata.state:type_name -> stroeer.core.v1.Article.Metadata.State
	18, // 15: stroeer.core.v1.Article.Metadata.start_time:type_name -> google.protobuf.Timestamp
	18, // 16: stroeer.core.v1.Article.Metadata.end_time:type_name -> google.protobuf.Timestamp
	18, // 17: stroeer.core.v1.Article.Metadata.publish_time:type_name -> google.protobuf.Timestamp
	18, // 18: stroeer.core.v1.Article.Metadata.update_time:type_name -> google.protobuf.Timestamp
	18, // 19: stroeer.core.v1.Article.Metadata.transformation_time:type_name -> google.protobuf.Timestamp
	4,  // 20: stroeer.core.v1.Article.Element.Asset.type:type_name -> stroeer.core.v1.Article.Element.Asset.Type
	14, // 21: stroeer.core.v1.Article.Element.Asset.fields:type_name -> stroeer.core.v1.Article.Element.Asset.FieldsEntry
	11, // 22: stroeer.core.v1.Article.Element.Asset.metadata:type_name -> stroeer.core.v1.Article.Metadata
	16, // 23: stroeer.core.v1.Article.Body.BodyNode.fields:type_name -> stroeer.core.v1.Article.Body.BodyNode.FieldsEntry
	15, // 24: stroeer.core.v1.Article.Body.BodyNode.children:type_name -> stroeer.core.v1.Article.Body.BodyNode
	9,  // 25: stroeer.core.v1.Article.Body.BodyNode.elements:type_name -> stroeer.core.v1.Article.Element
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_stroeer_core_v1_article_proto_init() }
func file_stroeer_core_v1_article_proto_init() {
	if File_stroeer_core_v1_article_proto != nil {
		return
	}
	file_stroeer_core_v1_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_stroeer_core_v1_article_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article_Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article_Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article_Keyword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article_Element_Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article_Body_BodyNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stroeer_core_v1_article_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stroeer_core_v1_article_proto_goTypes,
		DependencyIndexes: file_stroeer_core_v1_article_proto_depIdxs,
		EnumInfos:         file_stroeer_core_v1_article_proto_enumTypes,
		MessageInfos:      file_stroeer_core_v1_article_proto_msgTypes,
	}.Build()
	File_stroeer_core_v1_article_proto = out.File
	file_stroeer_core_v1_article_proto_rawDesc = nil
	file_stroeer_core_v1_article_proto_goTypes = nil
	file_stroeer_core_v1_article_proto_depIdxs = nil
}
