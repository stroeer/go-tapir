// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: stroeer/page/article/v1/article_extender_service.proto

package article

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArticleExtenderService_GetQuestions_FullMethodName = "/stroeer.page.article.v1.ArticleExtenderService/GetQuestions"
	ArticleExtenderService_GetAnswer_FullMethodName    = "/stroeer.page.article.v1.ArticleExtenderService/GetAnswer"
)

// ArticleExtenderServiceClient is the client API for ArticleExtenderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleExtenderServiceClient interface {
	GetQuestions(ctx context.Context, in *GetQuestionsRequest, opts ...grpc.CallOption) (*GetQuestionsResponse, error)
	GetAnswer(ctx context.Context, in *GetAnswerRequest, opts ...grpc.CallOption) (*GetAnswerResponse, error)
}

type articleExtenderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleExtenderServiceClient(cc grpc.ClientConnInterface) ArticleExtenderServiceClient {
	return &articleExtenderServiceClient{cc}
}

func (c *articleExtenderServiceClient) GetQuestions(ctx context.Context, in *GetQuestionsRequest, opts ...grpc.CallOption) (*GetQuestionsResponse, error) {
	out := new(GetQuestionsResponse)
	err := c.cc.Invoke(ctx, ArticleExtenderService_GetQuestions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleExtenderServiceClient) GetAnswer(ctx context.Context, in *GetAnswerRequest, opts ...grpc.CallOption) (*GetAnswerResponse, error) {
	out := new(GetAnswerResponse)
	err := c.cc.Invoke(ctx, ArticleExtenderService_GetAnswer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleExtenderServiceServer is the server API for ArticleExtenderService service.
// All implementations must embed UnimplementedArticleExtenderServiceServer
// for forward compatibility
type ArticleExtenderServiceServer interface {
	GetQuestions(context.Context, *GetQuestionsRequest) (*GetQuestionsResponse, error)
	GetAnswer(context.Context, *GetAnswerRequest) (*GetAnswerResponse, error)
	mustEmbedUnimplementedArticleExtenderServiceServer()
}

// UnimplementedArticleExtenderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArticleExtenderServiceServer struct {
}

func (UnimplementedArticleExtenderServiceServer) GetQuestions(context.Context, *GetQuestionsRequest) (*GetQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestions not implemented")
}
func (UnimplementedArticleExtenderServiceServer) GetAnswer(context.Context, *GetAnswerRequest) (*GetAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswer not implemented")
}
func (UnimplementedArticleExtenderServiceServer) mustEmbedUnimplementedArticleExtenderServiceServer() {
}

// UnsafeArticleExtenderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleExtenderServiceServer will
// result in compilation errors.
type UnsafeArticleExtenderServiceServer interface {
	mustEmbedUnimplementedArticleExtenderServiceServer()
}

func RegisterArticleExtenderServiceServer(s grpc.ServiceRegistrar, srv ArticleExtenderServiceServer) {
	s.RegisterService(&ArticleExtenderService_ServiceDesc, srv)
}

func _ArticleExtenderService_GetQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleExtenderServiceServer).GetQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleExtenderService_GetQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleExtenderServiceServer).GetQuestions(ctx, req.(*GetQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleExtenderService_GetAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleExtenderServiceServer).GetAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleExtenderService_GetAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleExtenderServiceServer).GetAnswer(ctx, req.(*GetAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleExtenderService_ServiceDesc is the grpc.ServiceDesc for ArticleExtenderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleExtenderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stroeer.page.article.v1.ArticleExtenderService",
	HandlerType: (*ArticleExtenderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuestions",
			Handler:    _ArticleExtenderService_GetQuestions_Handler,
		},
		{
			MethodName: "GetAnswer",
			Handler:    _ArticleExtenderService_GetAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stroeer/page/article/v1/article_extender_service.proto",
}
